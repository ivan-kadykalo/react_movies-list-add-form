{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","addMovie","initialMovie","initialError","useState","setMovie","errors","setErrors","urlRegex","handleChange","event","target","name","value","validateTitle","errorMessage","validateImdbUrl","test","validateImgUrl","validateImdbId","onSubmit","preventDefault","currentErrors","validateAll","currentValid","Object","values","every","length","type","onChange","onBlur","placeholder","autoComplete","App","moviesFromServer","setMovies","prev","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7151723a.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import {\n  FC,\n  useState,\n  ChangeEvent,\n  FormEvent,\n} from 'react';\n\nimport './NewMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const NewMovie: FC<Props> = ({ addMovie }) => {\n  const initialMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const initialError = {\n    ...initialMovie,\n  };\n\n  const [movie, setMovie] = useState(initialMovie);\n  const [errors, setErrors] = useState(initialError);\n  // eslint-disable-next-line\n  const urlRegex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  const handleChange = (\n    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    setMovie({ ...movie, [name]: value });\n  };\n\n  const validateTitle = () => {\n    let errorMessage = initialError.title;\n\n    if (!movie.title) {\n      errorMessage = 'Title is required!';\n    }\n\n    setErrors({\n      ...errors,\n      title: errorMessage,\n    });\n\n    return errorMessage;\n  };\n\n  const validateImdbUrl = () => {\n    let errorMessage = initialError.imdbUrl;\n\n    if (!movie.imdbUrl) {\n      errorMessage = 'ImdbUrl is required!';\n    } else if (!urlRegex.test(movie.imdbUrl)) {\n      errorMessage = 'Please enter valid URL!';\n    }\n\n    setErrors({\n      ...errors,\n      imdbUrl: errorMessage,\n    });\n\n    return errorMessage;\n  };\n\n  const validateImgUrl = () => {\n    let errorMessage = initialError.imgUrl;\n\n    if (!movie.imgUrl) {\n      errorMessage = 'ImgUrl is required!';\n    } else if (!urlRegex.test(movie.imgUrl)) {\n      errorMessage = 'Please enter valid URL!';\n    }\n\n    setErrors({\n      ...errors,\n      imgUrl: errorMessage,\n    });\n\n    return errorMessage;\n  };\n\n  const validateImdbId = () => {\n    let errorMessage = initialError.imdbId;\n\n    if (!movie.imdbId) {\n      errorMessage = 'ImdbId is required!';\n    }\n\n    setErrors({\n      ...errors,\n      imdbId: errorMessage,\n    });\n\n    return errorMessage;\n  };\n\n  const validateAll = () => {\n    const currentErrors = { ...errors };\n\n    currentErrors.title = validateTitle();\n    currentErrors.imgUrl = validateImgUrl();\n    currentErrors.imdbUrl = validateImdbUrl();\n    currentErrors.imdbId = validateImdbId();\n\n    return currentErrors;\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const currentErrors = validateAll();\n    const currentValid\n      = Object.values(currentErrors).every(value => !value);\n\n    setErrors(currentErrors);\n\n    if (currentValid) {\n      addMovie(movie);\n      setMovie(initialError);\n    }\n  };\n\n  return (\n    <form\n      className=\"form\"\n      onSubmit={handleSubmit}\n    >\n      <label className=\"form__label\">\n        * Title\n        <input\n          className={`form__input\n            ${errors.title.length > 0 && 'form__input--error'}`}\n          type=\"text\"\n          name=\"title\"\n          value={movie.title}\n          onChange={handleChange}\n          onBlur={validateTitle}\n          placeholder=\"Film title\"\n          autoComplete=\"off\"\n        />\n        {errors.title.length > 0\n          && <p className=\"form__error-message\">{errors.title}</p>}\n      </label>\n\n      <label className=\"form__label\">\n        Description\n        <textarea\n          className=\"form__text-area form__input\"\n          name=\"description\"\n          value={movie.description}\n          onChange={handleChange}\n          placeholder=\"About new film\"\n          autoComplete=\"off\"\n        />\n      </label>\n\n      <label className=\"form__label\">\n        * ImgUrl\n        <input\n          type=\"text\"\n          className={`form__input\n            ${errors.imgUrl.length > 0 && 'form__input--error'}`}\n          name=\"imgUrl\"\n          value={movie.imgUrl}\n          onChange={handleChange}\n          onBlur={validateImgUrl}\n          placeholder=\"https://imgUrl/example.jpg\"\n          autoComplete=\"off\"\n        />\n        {errors.imgUrl.length > 0\n          && <p className=\"form__error-message\">{errors.imgUrl}</p>}\n      </label>\n\n      <label className=\"form__label\">\n        * ImdbUrl\n        <input\n          type=\"text\"\n          className={`form__input\n            ${errors.imdbUrl.length > 0 && 'form__input--error'}`}\n          name=\"imdbUrl\"\n          value={movie.imdbUrl}\n          onChange={handleChange}\n          onBlur={validateImdbUrl}\n          placeholder=\"https://www.imdb.com/title/tt1375666\"\n          autoComplete=\"off\"\n        />\n        {errors.imdbUrl.length > 0\n          && <p className=\"form__error-message\">{errors.imdbUrl}</p>}\n      </label>\n\n      <label className=\"form__label\">\n        * ImdbId\n        <input\n          type=\"text\"\n          className={`form__input\n            ${errors.imdbId.length > 0 && 'form__input--error'}`}\n          name=\"imdbId\"\n          value={movie.imdbId}\n          onChange={handleChange}\n          onBlur={validateImdbId}\n          placeholder=\"tt1375666\"\n          autoComplete=\"off\"\n        />\n        {errors.imdbId.length > 0\n          && <p className=\"form__error-message\">{errors.imdbId}</p>}\n      </label>\n\n      <button\n        type=\"submit\"\n        className=\"form__button\"\n      >\n        Add new film\n      </button>\n      <p className=\"form__notation\">* Required fields</p>\n    </form>\n  );\n};\n","import { FC, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies(prev => [...prev, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar__header\">Add film form</h2>\n\n        <NewMovie\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}